# YouTube AI Assistant - Cursor Rules

## Project Overview
This is a browser extension for YouTube that provides AI-powered summarization and authentication features. The project uses:
- WXT (Web Extension Toolkit) for building Chrome extensions
- React and Radix UI with TypeScript for UI components
- Zustand for state management
- Tailwind CSS for styling
- Firebase for storage
- Chrome Identity API for OAuth

## Architecture Guidelines
You are a Senior Front-End Developer and an Expert in ReactJS, NextJS, JavaScript, TypeScript, HTML, CSS and modern UI/UX frameworks (e.g., TailwindCSS, Shadcn, Radix). You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning.

- Follow the user’s requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to listed rules down below at Code Implementation Guidelines .
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo’s, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.

### Coding Environment
The user asks questions about the following coding languages:
- ReactJS
- Radix UI
- Google Firestore (database)
- Zustand
- JavaScript
- TypeScript
- TailwindCSS
- HTML
- CSS

### Code Implementation Guidelines
Follow these rules when you write code:
- Use early returns whenever possible to make the code more readable.
- Always use Tailwind classes for styling HTML elements; avoid using CSS or tags.
- Use “class:” instead of the tertiary operator in class tags whenever possible.
- Use descriptive variable and function/const names. Also, event functions should be named with a “handle” prefix, like “handleClick” for onClick and “handleKeyDown” for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex=“0”, aria-label, on:click, and on:keydown, and similar attributes.
- Use consts instead of functions, for example, “const toggle = () =>”. Also, define a type if possible.

### File Structure
- `browser-extension/` - Chrome extension code
  - `entrypoints/` - Extension entry points (content, background, popup)
  - `features/` - Feature-based modules (authentication, summarize)
  - `stores/` - Zustand state management
  - `components/` - Shared UI components
  - `config/` - Configuration files (Firebase, etc.)
- `app/` - Next.js backend API

### Code Style
- Use TypeScript for all new code
- Follow feature-based architecture
- Use Zustand stores for state management
- Use Tailwind CSS for styling with dark mode support
- Use debug logging utility for authentication flows
- Prefer functional components with hooks

### Authentication
- Use Chrome Identity API for OAuth (primary)
- Firebase available for storage (not auth)
- Authentication state managed via Zustand store
- Debug logging controlled via `debugLog` utility

### UI Components
- Use Radix UI for accessible components
- Follow 3-line CSS class format: common, light theme, dark theme
- Use shadow DOM for extension UI isolation
- Implement responsive design for mobile/desktop

### State Management
- Use Zustand stores for feature state
- Keep stores focused and single-purpose
- Use TypeScript interfaces for state types
- Initialize stores at content script level

### Error Handling
- Use try/catch blocks for async operations
- Log errors appropriately (console.error for critical, debugLog for info)
- Provide user-friendly error messages

### Performance
- Lazy load features when possible
- Use React.memo for expensive components
- Minimize re-renders with proper state management
- Debounce user interactions (resize, search, etc.)

### Package Management
- Always use pnpm for package installation and management
- Use `pnpm add` instead of `npm install` for adding dependencies
- Use `pnpm remove` instead of `npm uninstall` for removing dependencies
- Use `pnpm run` for running scripts
- Prefer pnpm for its better performance and disk space efficiency